% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_calculateMetrics_from_Spectra.R
\name{calculateMetrics}
\alias{calculateMetrics}
\title{Calculate QC metrics from a Spectra object}
\usage{
calculateMetrics(object, metrics = qualityMetrics(object), ...)
}
\arguments{
\item{object}{`Spectra` object}

\item{metrics}{`character` specifying the quality metrics to be calculated
on `object`}

\item{...}{arguments passed to the quality metrics functions defined in 
`metrics`}
}
\value{
`data.frame` containing in the columns the metrics for the 
different spectra (samples in row)
}
\description{
Calculate QC metrics from a `Spectra` object. 
`calculateMetrics` is a wrapper for the function
`calculateMetricsFromSpectra`.
}
\details{
The metrics are defined by the argument `metrics`. Further arguments 
passed to the quality metric functions can be specified by the `params`
argument. `params` can contain named entries which are matched against 
the formal arguments of the quality metric functions.
}
\examples{
library(msdata)
library(Spectra)
fls <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
spectra <- Spectra(fls, backend = MsBackendMzR())

## define the quality metrics to be calculated
metrics <- c("areaUnderTic", "rtDuration", "msSignal10xChange")
    
#' ## calculate the metrics
## additional parameters passed to the quality metrics functions
## (MsLevel is an argument of areaUnderTic and msSignal10xChange,
## relativeTo is an argument of msSignal10xChange) passed to ...
calculateMetrics(object = spectra, metrics = metrics, 
    msLevel = 1, change = "jump", relativeTo = "Q1")
calculateMetrics(object = spectra, metrics = metrics, 
    msLevel = 1, change = "fall", relativeTo = "previous")
}
\author{
Thomas Naake, \email{thomasnaake@googlemail.com}
}
